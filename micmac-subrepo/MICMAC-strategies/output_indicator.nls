
to find-local-maxima-I

  if gMaxI <= compute-pop-total-with-state "I"
  [
    set gMaxI compute-pop-total-with-state "I"
    set gTimeofMaxI (ticks - min [tagged?] of nodes)
  ]

end

to compute-end-indicator 
    
  set gduration (ticks - min [tagged?] of nodes)
  
  let pop (sum [S_Node + I_Node + R_Node] of Nodes) + (sum [S_Group + I_Group + R_Group] of MobileGroups)
  
  let pmt gcumulated-pop-flight-expected
  let pmr gcumulated-pop-flight-real 
  set gout-cumulated-traffic-reduction ((pmt - pmr) / pmt) * 100
  set gTimeToReachAllNodes (max [tagged?] of nodes - min [tagged?] of nodes)
  set gtotal-number-people-infected ((compute-pop-total-with-state "R" + compute-pop-total-with-state "I") / pop) * 100   

  ;; (population cumule ayant vole / population totale initiale) / (duree theorique de l'epidemie * (duree reelle epidemie / nb pas necessaire au calibrage) )
  set gend-effective-mobility-rate (gcumulated-pop-flight-real / ( gnumber-nodes * (gS-At-Node + gI-At-Node + gR-At-Node ))) / ( gDurationEpidemy-days  * ( gduration / gnbStepCalib) )



end
